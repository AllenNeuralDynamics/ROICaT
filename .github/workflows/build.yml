name: build

on:
  push:
    # branches: [ "main" ]
    branches: [ "dev" ]
    # branches: [ "main", "dev" ]
  # pull_request:
  #   branches: [ "main" ]

permissions:
  contents: read

jobs:

  build_CPU:

    name: ${{ matrix.platform }}, py${{ matrix.python-version }}, ${{ matrix.extra }}, ${{ matrix.install-level }}
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform: [
          # ubuntu-latest,
          ubuntu-22.04,
          ubuntu-20.04,
          # ubuntu-18.04,
          # # windows-latest,
          windows-2022,
          windows-2019,
          # windows-2016,
          # # macos-latest,
          # macos-12.0,  ## RH: not working 20230507
          macos-11.0,
          # macos-10.15,
        ]
        python-version: [ 
          # "3.9",
          # "3.10",
          "3.11",
          # "3.12",
        ]
        extra: [
          core,
          # core_latest,
        ]
        install-level: [
          system,
          user,
        ]

    steps:
    
    - name: Set up conda
      uses: conda-incubator/setup-miniconda@v2
      with:
        miniconda-version: latest
        activate-environment: ROICaT
        auto-activate-base: true
        auto-update-conda: false
        remove-profiles: true
        architecture: x64
        clean-patched-environment-file: true
        run-post: true

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Check out repository code
      uses: actions/checkout@v3
        
    - name: Prepare PowerShell
      shell: pwsh
      run: |
          conda info
          conda list

    - name: Check specs of the machine -- Linux
    ## if it is any version of linux
      if: startsWith(matrix.platform, 'ubuntu')
      run: |
        ## check cpu, memory, disk, etc.
        ## print the command inputs to the workflow
        echo "CPU info (lscpu):"
        lscpu
        echo "Memory info (free -h):"
        free -h
        echo "Disk info (df -h):"
        df -h
        echo "Network info (ip a):"
        ip a
        echo "OS info (uname -a):"
        uname -a
        echo "NVidia GPU info (nvidia-smi):"
        nvidia-smi
    - name: Check specs of the machine -- Windows
      if: startsWith(matrix.platform, 'windows')
      run: |
        ## check cpu, memory, disk, etc.
        ## print the command inputs to the workflow
        echo "CPU info (Get-WmiObject Win32_Processor):"
        Get-WmiObject Win32_Processor
        echo "Memory info (Get-WmiObject Win32_OperatingSystem):"
        Get-WmiObject Win32_OperatingSystem
        echo "Disk info (Get-WmiObject Win32_LogicalDisk):"
        Get-WmiObject Win32_LogicalDisk
        echo "Network info (Get-WmiObject Win32_NetworkAdapterConfiguration):"
        Get-WmiObject Win32_NetworkAdapterConfiguration
        echo "OS info (Get-WmiObject Win32_OperatingSystem):"
        Get-WmiObject Win32_OperatingSystem
        echo "NVidia GPU info (nvidia-smi):"
        nvidia-smi
    - name: Check specs of the machine -- MacOS
      if: startsWith(matrix.platform, 'macos')
      run: |
        ## check cpu, memory, disk, etc.
        ## print the command inputs to the workflow
        echo "CPU info (sysctl -n machdep.cpu.brand_string):"
        sysctl -n machdep.cpu.brand_string
        echo "Memory info (sysctl -n hw.memsize):"
        sysctl -n hw.memsize
        echo "Disk info (df -h):"
        df -h
        echo "Network info (ip a):"
        ip a
        echo "OS info (uname -a):"
        uname -a
    

    - name: Install ROICaT with pip dependencies -- system-level
      if: matrix.install-level == 'system'
      run: |
        pip install -v -e .[core]
    - name: Install ROICaT with pip dependencies -- user-level
      if: matrix.install-level == 'user'
      run: |
        pip install -v -e .[core] --user


    - name: Check installed packages
      run: |
        pip list
        ## Below, check which versions of torch and torchvision are installed; and whether CUDA is available
        python -c "import torch, torchvision; print(f'Using versions: torch=={torch.__version__}, torchvision=={torchvision.__version__}');  print('torch.cuda.is_available() = ', torch.cuda.is_available())"

    - name: Run pytest on ROICaT and some key dependencies
      run: |
        # pip install tox tox-gh-actions
        pip install pytest
        pytest -v
